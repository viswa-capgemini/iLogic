AddReference "C:\Users\reetts\Desktop\Project\IPT_project\3Dconfig\parts\Newtonsoft.Json.dll"
Imports System.IO
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq
Imports Inventor

Sub Main()
    Dim invApp As Inventor.Application = ThisApplication
    Dim asmDoc As AssemblyDocument = ThisDoc.Document

    Dim jsonPath As String = "C:\Users\reetts\Desktop\Project\IPT_project\3Dconfig\parts\layoutdata.txt"
    If Not System.IO.File.Exists(jsonPath) Then
        MessageBox.Show("JSON file not found at: " & jsonPath)
        Return
    End If

    Dim jsonText As String = System.IO.File.ReadAllText(jsonPath)
    Dim json As JObject = JObject.Parse(jsonText)
    Dim basePath As String = json("basePath").ToString()

    For Each comp In json("components")
        Dim fileName As String = comp("fileName").ToString()
        Dim fullPath As String = System.IO.Path.Combine(basePath, fileName)

        If Not System.IO.File.Exists(fullPath) Then
            MessageBox.Show("Missing part: " & fullPath)
            Continue For
        End If

        Dim px As Double = CDbl(comp("position")("x")) / 10
        Dim py As Double = CDbl(comp("position")("y")) / 10
        Dim pz As Double = CDbl(comp("position")("z")) / 10

        Dim rx As Double = 0, ry As Double = 0, rz As Double = 0
        If comp("rotation") IsNot Nothing Then
            rx = CDbl(comp("rotation")("x"))
            ry = CDbl(comp("rotation")("y"))
            rz = CDbl(comp("rotation")("z"))
        End If

        Dim tg As TransientGeometry = invApp.TransientGeometry
        Dim matrix As Matrix = tg.CreateMatrix()
        matrix.SetTranslation(tg.CreateVector(px, py, pz), False)

        ' Beam logic
        If fileName.ToLower().Contains("beam") Then
            Dim spacing As Double = -1400 / 10
            Dim zSpacing As Double = -4100 / 10

            If px = -120.7 AndAlso py = 246.1 AndAlso pz = -50.5 Then
                For i As Integer = 0 To 9
                    For j As Integer = 0 To 2
                        Dim beamMatrix As Matrix = tg.CreateMatrix()
                        beamMatrix.SetTranslation(tg.CreateVector(px, py + (j * spacing), pz + (i * zSpacing)), False)
                        beamMatrix.Cell(1, 1) = 1 : beamMatrix.Cell(2, 3) = 1 : beamMatrix.Cell(3, 2) = -1
                        asmDoc.ComponentDefinition.Occurrences.Add(fullPath, beamMatrix)
                    Next
                Next
            ElseIf px = 28.3 AndAlso py = 246.1 AndAlso pz = -359 Then
                For i As Integer = 0 To 9
                    For j As Integer = 0 To 2
                        Dim beamMatrix As Matrix = tg.CreateMatrix()
                        beamMatrix.SetTranslation(tg.CreateVector(px, py + (j * spacing), pz + (i * zSpacing)), False)
                        beamMatrix.Cell(1, 1) = -1 : beamMatrix.Cell(2, 3) = 1 : beamMatrix.Cell(3, 2) = 1
                        asmDoc.ComponentDefinition.Occurrences.Add(fullPath, beamMatrix)
                    Next
                Next
            Else
                For i As Integer = 0 To 2
                    Dim beamMatrix As Matrix = tg.CreateMatrix()
                    beamMatrix.SetTranslation(tg.CreateVector(px, py + (i * spacing), pz), False)
                    asmDoc.ComponentDefinition.Occurrences.Add(fullPath, beamMatrix)
                Next
            End If
            Continue For
        End If

        ' Stopper logic
        If fileName.ToLower().Contains("stopper") Then
            Dim spacing As Double = -1400 / 10
            Dim offsetZ As Double = 4100 / 10
            For i As Integer = 0 To 2
                Dim stopperMatrix As Matrix = tg.CreateMatrix()
                stopperMatrix.SetTranslation(tg.CreateVector(pz, py + (i * spacing), px), False)
                Dim rotationMatrix As Matrix = tg.CreateMatrix()
                rotationMatrix.SetToRotation(Math.PI / 2, tg.CreateVector(0, 1, 0), tg.CreatePoint(0, 0, 0))
                stopperMatrix.TransformBy(rotationMatrix)
                asmDoc.ComponentDefinition.Occurrences.Add(fullPath, stopperMatrix)
            Next
            For i As Integer = 0 To 2
                Dim stopperMatrix2 As Matrix = tg.CreateMatrix()
                stopperMatrix2.SetTranslation(tg.CreateVector(pz + offsetZ, py + (i * spacing), px), False)
                Dim rotationMatrix As Matrix = tg.CreateMatrix()
                rotationMatrix.SetToRotation(Math.PI / 2, tg.CreateVector(0, 1, 0), tg.CreatePoint(0, 0, 0))
                stopperMatrix2.TransformBy(rotationMatrix)
                asmDoc.ComponentDefinition.Occurrences.Add(fullPath, stopperMatrix2)
            Next
            Continue For
        End If

        ' C-Channel
        If fileName.ToLower().Contains("c - channel.ipt") Then
            Dim zSpacing As Double = -4100 / 10
            Dim spacing As Double = -1400 / 10
            For j As Integer = 0 To 9
                For i As Integer = 0 To 2
                    Dim channelMatrix As Matrix = tg.CreateMatrix()
                    channelMatrix.SetTranslation(tg.CreateVector(px, py + (i * spacing), pz + (j * zSpacing)), False)
                    asmDoc.ComponentDefinition.Occurrences.Add(fullPath, channelMatrix)
                Next
            Next
            Continue For
        End If

        ' Screws
        If fileName.ToLower().Contains("iso 4018") Then
            Dim screwSpacing As Double = -50 / 10
            For i As Integer = 0 To 1
                Dim screwMatrix As Matrix = tg.CreateMatrix()
                screwMatrix.SetTranslation(tg.CreateVector(px, py, pz + (i * screwSpacing)), False)
                Dim rotationMatrix As Matrix = tg.CreateMatrix()
                rotationMatrix.SetToRotation(Math.PI, tg.CreateVector(0, 0, 1), tg.CreatePoint(0, 0, 0))
                screwMatrix.TransformBy(rotationMatrix)
                asmDoc.ComponentDefinition.Occurrences.Add(fullPath, screwMatrix)
            Next
            Continue For
        End If

        ' Normal part
        asmDoc.ComponentDefinition.Occurrences.Add(fullPath, matrix)

        ' Duplicate frame
        If fileName.ToLower().Contains("frame") Then
            Dim spacing As Double = -4100 / 10
            For i As Integer = 0 To 9
                Dim matrix2 As Matrix = tg.CreateMatrix()
                matrix2.SetTranslation(tg.CreateVector(px, py, pz + (i * spacing)), False)
                asmDoc.ComponentDefinition.Occurrences.Add(fullPath, matrix2)
            Next
        End If
    Next

    asmDoc.Save()
    ModifyFrameParameters()
    MessageBox.Show("All components placed!", "Assembly Complete")
End Sub

Sub ModifyFrameParameters()
    Dim invApp As Inventor.Application = ThisApplication
    Dim asmDoc As AssemblyDocument = ThisDoc.Document

    Dim frameOcc As ComponentOccurrence = Nothing
    For Each occ As ComponentOccurrence In asmDoc.ComponentDefinition.Occurrences
        If occ.Name.ToUpper().Contains("FRAME ASSY 1000D-7M") Then
            frameOcc = occ
            Exit For
        End If
    Next

    If frameOcc Is Nothing Then
        MessageBox.Show("Frame assembly not found.")
        Return
    End If

    Try
        Dim frameDoc As AssemblyDocument = CType(invApp.Documents.Open(frameOcc.Definition.Document.FullFileName, False), AssemblyDocument)
        If frameDoc Is Nothing Then
            MessageBox.Show("Frame document could not be opened.")
            Return
        End If

        Dim uprightOcc As ComponentOccurrence = Nothing
        For Each subOcc As ComponentOccurrence In frameDoc.ComponentDefinition.Occurrences
            If subOcc.Name.ToUpper().Contains("UPRIGHT GXL 90 - 5000 X 1.6") Then
                uprightOcc = subOcc
                Exit For
            End If
        Next

        If uprightOcc Is Nothing Then
            MessageBox.Show("Upright not found in frame assembly.")
            Return
        End If

        Dim uprightDoc As PartDocument = CType(invApp.Documents.Open(uprightOcc.Definition.Document.FullFileName, True), PartDocument)
        If uprightDoc Is Nothing Then
            MessageBox.Show("Unable to open upright part document.")
            Return
        End If

        ' Change the parameter value here
        Dim heightParam As Parameter = uprightDoc.ComponentDefinition.Parameters.Item("Height")
        heightParam.Value = 5000 / 10 ' Example: 500 cm
        uprightDoc.Update2()
        uprightDoc.Save()
        uprightDoc.Close(True)

    Catch ex As Exception
        MessageBox.Show("Error modifying frame parameter: " & ex.Message)
    End Try
End Sub
